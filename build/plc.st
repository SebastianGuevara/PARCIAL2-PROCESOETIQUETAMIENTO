TYPE
  LOGLEVEL : (CRITICAL, WARNING, INFO, DEBUG) := INFO;
END_TYPE

FUNCTION_BLOCK LOGGER
  VAR_INPUT
    TRIG : BOOL;
    MSG : STRING;
    LEVEL : LOGLEVEL := INFO;
  END_VAR
  VAR
    TRIG0 : BOOL;
  END_VAR

  IF TRIG AND NOT TRIG0 THEN
  {{
   LogMessage(GetFbVar(LEVEL),(char*)GetFbVar(MSG, .body),GetFbVar(MSG, .len));
  }}
  END_IF;
  TRIG0:=TRIG;
END_FUNCTION_BLOCK


PROGRAM program0
  VAR
    START AT %IX0.0 : BOOL;
    STOP AT %IX0.1 : BOOL;
    INPUT0 AT %IX0.2 : BOOL := TRUE;
    OUTPUT0 AT %QX0.0 : BOOL;
    OUTPUT1 AT %QX0.1 : BOOL;
    STOP_LIGHT AT %QX0.2 : BOOL;
    START_LIGHT AT %QX0.3 : BOOL;
  END_VAR
  VAR
    IR1 : BOOL;
    IR2 : BOOL;
    IR3 : BOOL;
    IR4 : BOOL;
    IR5 : BOOL;
    TON_TIME1 : TIME := T#5S;
    COUNT_START : INT := 5;
    TON0 : TON;
    CTU0 : CTU;
    R_TRIG1 : R_TRIG;
  END_VAR

  IF NOT(IR3) AND START AND NOT(STOP) THEN
    OUTPUT0 := TRUE; (*set*)
  END_IF;
  IF NOT(IR3) AND START AND NOT(STOP) THEN
    OUTPUT1 := FALSE; (*reset*)
  END_IF;
  IF NOT(IR3) AND START AND NOT(STOP) THEN
    IR1 := TRUE; (*set*)
  END_IF;
  IF NOT(INPUT0) AND (IR1 OR IR4) AND NOT(STOP) THEN
    OUTPUT0 := FALSE; (*reset*)
  END_IF;
  IF NOT(INPUT0) AND (IR1 OR IR4) AND NOT(STOP) THEN
    OUTPUT1 := TRUE; (*set*)
  END_IF;
  IF NOT(INPUT0) AND (IR1 OR IR4) AND NOT(STOP) THEN
    IR2 := TRUE; (*set*)
  END_IF;
  TON0(IN := IR2 AND NOT(STOP), PT := TON_TIME1);
  IF TON0.Q THEN
    OUTPUT0 := TRUE; (*set*)
  END_IF;
  IF TON0.Q THEN
    OUTPUT1 := FALSE; (*reset*)
  END_IF;
  IR3 := TON0.Q;
  R_TRIG1(CLK := IR3 AND NOT(STOP));
  CTU0(CU := R_TRIG1.Q, R := START, PV := COUNT_START);
  IF CTU0.Q THEN
    START := FALSE; (*reset*)
  END_IF;
  START_LIGHT := NOT(STOP) AND IR4;
  STOP_LIGHT := NOT(IR5) AND (NOT(IR4) OR STOP);
  IF CTU0.Q THEN
    OUTPUT1 := FALSE; (*reset*)
  END_IF;
  IF CTU0.Q THEN
    OUTPUT0 := FALSE; (*reset*)
  END_IF;
  IF NOT(IR3) AND START AND NOT(STOP) THEN
    START := TRUE; (*set*)
  END_IF;
  IF NOT(IR5) AND (NOT(IR4) OR STOP) THEN
    OUTPUT0 := FALSE; (*reset*)
  END_IF;
  IF NOT(IR5) AND (NOT(IR4) OR STOP) THEN
    OUTPUT1 := FALSE; (*reset*)
  END_IF;
  IF NOT(IR3) AND START AND NOT(STOP) THEN
    IR4 := TRUE; (*set*)
  END_IF;
  IF CTU0.Q THEN
    IR4 := FALSE; (*reset*)
  END_IF;
  IF NOT(IR5) AND (NOT(IR4) OR STOP) THEN
    IR4 := FALSE; (*reset*)
  END_IF;
  IF TON0.Q THEN
    IR2 := FALSE; (*reset*)
  END_IF;
  IF NOT(INPUT0) AND (IR1 OR IR4) AND NOT(STOP) THEN
    IR1 := FALSE; (*reset*)
  END_IF;
END_PROGRAM


CONFIGURATION Config0

  RESOURCE Res0 ON PLC
    TASK task0(INTERVAL := T#20ms,PRIORITY := 0);
    PROGRAM instance0 WITH task0 : program0;
  END_RESOURCE
END_CONFIGURATION
